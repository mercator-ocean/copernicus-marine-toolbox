# serializer version: 1
# name: TestQueryBuilder.test_basic_query_builder_responsesubset
  dict({
    'file_path': True,
    'output_directory': True,
  })
# ---
# name: TestQueryBuilder.test_query_builder_catalogue
  dict({
    'products': dict({
      '__all__': dict({
        'datasets': dict({
          '__all__': dict({
            'dataset_id': True,
          }),
        }),
        'product_id': True,
      }),
    }),
  })
# ---
# name: TestQueryBuilder.test_query_builder_catalogue_deep_inside
  dict({
    'products': dict({
      '__all__': dict({
        'datasets': dict({
          '__all__': dict({
            'versions': dict({
              '__all__': dict({
                'parts': dict({
                  '__all__': dict({
                    'services': dict({
                      '__all__': dict({
                        'service_name': True,
                        'variables': dict({
                          '__all__': dict({
                            'coordinates': dict({
                              '__all__': dict({
                                'coordinate_unit': True,
                                'maximum_value': True,
                              }),
                            }),
                          }),
                        }),
                      }),
                    }),
                  }),
                }),
              }),
            }),
          }),
        }),
      }),
    }),
  })
# ---
# name: TestQueryBuilder.test_query_builder_responseget
  dict({
    'files': True,
    'files_deleted': True,
  })
# ---
# name: TestQueryBuilder.test_query_builder_responseget_inside_basemodel
  dict({
    'files': dict({
      '__all__': dict({
        'file_status': True,
      }),
    }),
  })
# ---
# name: TestQueryBuilder.test_return_available_fields
  list([
    'arco_updated_date',
    'arco_updating_start_date',
    'axis',
    'bbox',
    'chunk_geometric_factor',
    'chunk_reference_coordinate',
    'chunk_type',
    'chunking_length',
    'coordinate_id',
    'coordinate_unit',
    'coordinates',
    'dataset_id',
    'dataset_name',
    'datasets',
    'description',
    'digital_object_identifier',
    'keywords',
    'label',
    'maximum_value',
    'minimum_value',
    'name',
    'parts',
    'platforms_metadata',
    'processing_level',
    'product_id',
    'production_center',
    'products',
    'released_date',
    'retired_date',
    'service_format',
    'service_name',
    'service_short_name',
    'services',
    'short_name',
    'sources',
    'standard_name',
    'step',
    'thumbnail_url',
    'title',
    'units',
    'uri',
    'url_metadata',
    'values',
    'variables',
    'versions',
  ])
# ---
# name: TestQueryBuilder.test_return_available_fields.1
  list([
    'etag',
    'file_format',
    'file_path',
    'file_size',
    'file_status',
    'filename',
    'files',
    'files_deleted',
    'files_not_found',
    'https_url',
    'last_modified_datetime',
    'message',
    'number_of_files_to_download',
    'output_directory',
    's3_url',
    'status',
    'total_size',
  ])
# ---
# name: TestQueryBuilder.test_return_available_fields.2
  list([
    'coordinate_id',
    'coordinates_extent',
    'data_transfer_size',
    'file_path',
    'file_size',
    'file_status',
    'filename',
    'maximum',
    'message',
    'minimum',
    'output_directory',
    'status',
    'unit',
    'variables',
  ])
# ---
# name: TestQueryBuilder.test_subset_optional_coordinate_id
  dict({
    'coordinates_extent': dict({
      '__all__': dict({
        'coordinate_id': True,
      }),
    }),
  })
# ---
# name: TestQueryBuilder.test_subset_optional_coordinate_id_and_file
  dict({
    'coordinates_extent': dict({
      '__all__': dict({
        'coordinate_id': True,
      }),
    }),
    'file_status': True,
  })
# ---
# name: TestQueryBuilder.test_subset_optional_float
  dict({
    'data_transfer_size': True,
    'file_size': True,
  })
# ---
# name: TestQueryBuilder.test_subset_optional_status
  dict({
    'file_status': True,
    'status': True,
  })
# ---
